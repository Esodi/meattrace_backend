# Generated by Django 5.2.6 on 2025-10-13 13:24

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('meat_trace', '0020_slaughterpart_used_in_product_productingredient'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Shop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=200, null=True)),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('contact_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('business_license', models.CharField(blank=True, max_length=100, null=True)),
                ('tax_id', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.AddField(
            model_name='userprofile',
            name='shop',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_profiles', to='meat_trace.shop'),
        ),
        migrations.AlterField(
            model_name='inventory',
            name='shop',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='meat_trace.shop'),
        ),
        migrations.AlterField(
            model_name='order',
            name='shop',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='meat_trace.shop'),
        ),
        migrations.AlterField(
            model_name='receipt',
            name='shop',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receipts', to='meat_trace.shop'),
        ),
        migrations.CreateModel(
            name='ShopUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('manager', 'Manager'), ('salesperson', 'Salesperson'), ('cashier', 'Cashier'), ('inventory_clerk', 'Inventory Clerk')], default='salesperson', max_length=20)),
                ('permissions', models.CharField(choices=[('read', 'Read Only'), ('write', 'Read/Write'), ('admin', 'Full Admin')], default='write', max_length=20)),
                ('invited_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('joined_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('invited_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_shop_invitations', to=settings.AUTH_USER_MODEL)),
                ('shop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='meat_trace.shop')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shop_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'shop')},
            },
        ),
        # Data migration to create shops and update references
        migrations.RunSQL(
            """
            -- Create shops for existing Shop role users
            INSERT INTO meat_trace_shop (name, description, contact_email, created_at, updated_at, is_active)
            SELECT
                username || ' Shop' as name,
                'Shop for ' || username as description,
                email as contact_email,
                datetime('now') as created_at,
                datetime('now') as updated_at,
                1 as is_active
            FROM auth_user
            WHERE id IN (
                SELECT user_id FROM meat_trace_userprofile WHERE role = 'Shop'
            );

            -- Update user profiles to reference shops
            UPDATE meat_trace_userprofile
            SET shop_id = (
                SELECT s.id
                FROM meat_trace_shop s
                WHERE s.name = (SELECT username || ' Shop' FROM auth_user WHERE id = meat_trace_userprofile.user_id)
            )
            WHERE role = 'Shop';

            -- Create ShopUser links
            INSERT INTO meat_trace_shopuser (user_id, shop_id, role, permissions, invited_at, joined_at, is_active)
            SELECT
                up.user_id,
                up.shop_id,
                'owner' as role,
                'admin' as permissions,
                datetime('now') as invited_at,
                datetime('now') as joined_at,
                1 as is_active
            FROM meat_trace_userprofile up
            WHERE up.role = 'Shop' AND up.shop_id IS NOT NULL;

            -- Update inventory to reference shops instead of users
            UPDATE meat_trace_inventory
            SET shop_id = (
                SELECT s.id
                FROM meat_trace_shop s
                INNER JOIN auth_user au ON s.name = au.username || ' Shop'
                WHERE au.id = meat_trace_inventory.shop_id
            )
            WHERE shop_id IS NOT NULL;

            -- Update receipt to reference shops instead of users
            UPDATE meat_trace_receipt
            SET shop_id = (
                SELECT s.id
                FROM meat_trace_shop s
                INNER JOIN auth_user au ON s.name = au.username || ' Shop'
                WHERE au.id = meat_trace_receipt.shop_id
            )
            WHERE shop_id IS NOT NULL;

            -- Update order to reference shops instead of users
            UPDATE meat_trace_order
            SET shop_id = (
                SELECT s.id
                FROM meat_trace_shop s
                INNER JOIN auth_user au ON s.name = au.username || ' Shop'
                WHERE au.id = meat_trace_order.shop_id
            )
            WHERE shop_id IS NOT NULL;
            """,
            reverse_sql=migrations.RunSQL.noop
        ),
        # Data migration to create shops for existing Shop role users
        migrations.RunSQL(
            """
            -- Create shops for existing Shop role users
            INSERT INTO meat_trace_shop (name, description, contact_email, created_at, updated_at, is_active)
            SELECT
                username || ' Shop' as name,
                'Shop for ' || username as description,
                email as contact_email,
                datetime('now') as created_at,
                datetime('now') as updated_at,
                1 as is_active
            FROM auth_user
            WHERE id IN (
                SELECT user_id FROM meat_trace_userprofile WHERE role = 'Shop'
            );

            -- Update user profiles to reference shops
            UPDATE meat_trace_userprofile
            SET shop_id = (
                SELECT s.id
                FROM meat_trace_shop s
                WHERE s.name = (SELECT username || ' Shop' FROM auth_user WHERE id = meat_trace_userprofile.user_id)
            )
            WHERE role = 'Shop';

            -- Create ShopUser links
            INSERT INTO meat_trace_shopuser (user_id, shop_id, role, permissions, invited_at, joined_at, is_active)
            SELECT
                up.user_id,
                up.shop_id,
                'owner' as role,
                'admin' as permissions,
                datetime('now') as invited_at,
                datetime('now') as joined_at,
                1 as is_active
            FROM meat_trace_userprofile up
            WHERE up.role = 'Shop' AND up.shop_id IS NOT NULL;
            """,
            reverse_sql=migrations.RunSQL.noop
        ),
    ]
